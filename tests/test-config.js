// ÊµãËØïÈÖçÁΩÆ
export const TEST_CONFIG = {
    // ÊµãËØïAPIÂØÜÈí• - ‰ΩøÁî®ÂâçËØ∑ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè QWEN_TTS_API_KEY
    API_KEY: process.env.QWEN_TTS_API_KEY || '',
    
    // APIÁ´ØÁÇπ
    API_ENDPOINT: 'https://dashscope.aliyuncs.com/api/v1/services/aigc/multimodal-generation/generation',
    
    // ÊµãËØïÈü≥Ëâ≤ - Ê†πÊçÆÊäÄÊúØÊñáÊ°£
    TEST_VOICES: ['Chelsie', 'Ethan', 'Serena', 'Cherry', 'Dylan', 'Jada', 'Sunny'],
    
    // ÊµãËØïÊñáÊú¨
    TEST_TEXTS: {
        short: '‰Ω†Â•ΩÔºåËøôÊòØ‰∏Ä‰∏™ÊµãËØï„ÄÇ',
        medium: '‰∫∫Â∑•Êô∫ËÉΩÊ≠£Âú®ÊîπÂèòÊàë‰ª¨ÁöÑÁîüÊ¥ªÊñπÂºèÔºå‰ªéÊô∫ËÉΩÂÆ∂Â±ÖÂà∞Ëá™Âä®È©æÈ©∂ÔºåAIÊäÄÊúØÊó†Â§Ñ‰∏çÂú®„ÄÇ',
        long: 'Âú®Ëøô‰∏™Êï∞Â≠óÂåñÊó∂‰ª£Ôºå‰∫∫Â∑•Êô∫ËÉΩÊäÄÊúØÊ≠£Âú®ÂêÑ‰∏™È¢ÜÂüüÂèëÊå•ÁùÄË∂äÊù•Ë∂äÈáçË¶ÅÁöÑ‰ΩúÁî®„ÄÇ‰ªéÂåªÁñóËØäÊñ≠Âà∞ÈáëËûçÈ£éÊéßÔºå‰ªéÊô∫ËÉΩÂà∂ÈÄ†Âà∞‰∏™ÊÄßÂåñÊé®ËçêÔºåAI‰∏ç‰ªÖÊèêÈ´ò‰∫ÜÂ∑•‰ΩúÊïàÁéáÔºåËøò‰∏∫‰∫∫Á±ªÂàõÈÄ†‰∫ÜÂâçÊâÄÊú™ÊúâÁöÑ‰ª∑ÂÄº„ÄÇÊú™Êù•ÔºåÈöèÁùÄÊäÄÊúØÁöÑ‰∏çÊñ≠ËøõÊ≠•Ôºå‰∫∫Â∑•Êô∫ËÉΩÂ∞ÜÂú®Êõ¥Â§öÈ¢ÜÂüüÂÆûÁé∞Á™ÅÁ†¥Ôºå‰∏∫‰∫∫Á±ªÁ§æ‰ºöÂ∏¶Êù•Êõ¥Âä†ÁæéÂ•ΩÁöÑÂâçÊôØ„ÄÇ',
        chinese: '‰ªäÂ§©Â§©Ê∞îÁúüÂ•ΩÔºåÊàë‰ª¨‰∏ÄËµ∑ÂéªÂÖ¨Âõ≠Êï£Ê≠•Âêß„ÄÇ',
        english: 'Hello, this is a test of the Qwen TTS system.',
        mixed: 'AIÊäÄÊúØÁúüÁöÑÂæàamazingÔºåÊú™Êù•ÂèëÂ±ïpotentialÂ∑®Â§ßÔºÅ'
    },
    
    // ÊµãËØïÂèÇÊï∞
    TIMEOUT: 30000, // 30ÁßíË∂ÖÊó∂
    MAX_RETRIES: 3,
    
    // ÊúüÊúõÁöÑÂìçÂ∫îÊ†ºÂºè
    EXPECTED_RESPONSE_KEYS: ['output', 'audio', 'usage'],
    
    // ÊµãËØïÁî®‰æãÂàÜÁªÑ
    TEST_GROUPS: {
        connectivity: 'ËøûÊé•ÊÄßÊµãËØï',
        authentication: 'ËÆ§ËØÅÊµãËØï',
        text_processing: 'ÊñáÊú¨Â§ÑÁêÜÊµãËØï',
        voice_selection: 'Èü≥Ëâ≤ÈÄâÊã©ÊµãËØï',
        error_handling: 'ÈîôËØØÂ§ÑÁêÜÊµãËØï',
        performance: 'ÊÄßËÉΩÊµãËØï'
    }
};

// ÊµãËØïÊñ≠Ë®ÄÂ∑•ÂÖ∑
export class TestAsserts {
    static equal(actual, expected, message = '') {
        if (actual !== expected) {
            throw new Error(`Êñ≠Ë®ÄÂ§±Ë¥•: ${message}\nÂÆûÈôÖÂÄº: ${actual}\nÊúüÊúõÂÄº: ${expected}`);
        }
    }
    
    static notEqual(actual, expected, message = '') {
        if (actual === expected) {
            throw new Error(`Êñ≠Ë®ÄÂ§±Ë¥•: ${message}\nÂÆûÈôÖÂÄº: ${actual} ‰∏çÂ∫îÁ≠â‰∫éÊúüÊúõÂÄº: ${expected}`);
        }
    }
    
    static isTrue(value, message = '') {
        if (!value) {
            throw new Error(`Êñ≠Ë®ÄÂ§±Ë¥•: ${message}\nÊúüÊúõ‰∏∫ÁúüÔºåÂÆûÈôÖ‰∏∫ÂÅá`);
        }
    }
    
    static isFalse(value, message = '') {
        if (value) {
            throw new Error(`Êñ≠Ë®ÄÂ§±Ë¥•: ${message}\nÊúüÊúõ‰∏∫ÂÅáÔºåÂÆûÈôÖ‰∏∫Áúü`);
        }
    }
    
    static notNull(value, message = '') {
        if (value === null || value === undefined) {
            throw new Error(`Êñ≠Ë®ÄÂ§±Ë¥•: ${message}\nÂÄº‰∏çÂ∫î‰∏∫nullÊàñundefined`);
        }
    }
    
    static isArray(value, message = '') {
        if (!Array.isArray(value)) {
            throw new Error(`Êñ≠Ë®ÄÂ§±Ë¥•: ${message}\nÊúüÊúõ‰∏∫Êï∞ÁªÑ`);
        }
    }
    
    static contains(array, value, message = '') {
        if (!array.includes(value)) {
            throw new Error(`Êñ≠Ë®ÄÂ§±Ë¥•: ${message}\nÊï∞ÁªÑ ${JSON.stringify(array)} ‰∏çÂåÖÂê´ ${value}`);
        }
    }
}

// ÊµãËØïËøêË°åÂô®Â∑•ÂÖ∑
export class TestRunner {
    constructor() {
        this.tests = [];
        this.results = {
            passed: 0,
            failed: 0,
            total: 0,
            errors: []
        };
    }
    
    addTest(name, testFunction) {
        this.tests.push({ name, testFunction });
    }
    
    async run() {
        console.log('üß™ ÂºÄÂßãËøêË°åÊµãËØï...\n');
        
        for (const test of this.tests) {
            this.results.total++;
            try {
                await test.testFunction();
                console.log(`‚úÖ ${test.name}`);
                this.results.passed++;
            } catch (error) {
                console.error(`‚ùå ${test.name}: ${error.message}`);
                this.results.failed++;
                this.results.errors.push({ test: test.name, error: error.message });
            }
        }
        
        this.printResults();
        return this.results;
    }
    
    printResults() {
        console.log('\nüìä ÊµãËØïÁªìÊûú:');
        console.log(`ÊÄªÊµãËØïÊï∞: ${this.results.total}`);
        console.log(`ÈÄöËøá: ${this.results.passed}`);
        console.log(`Â§±Ë¥•: ${this.results.failed}`);
        
        if (this.results.errors.length > 0) {
            console.log('\n‚ùå Â§±Ë¥•ËØ¶ÊÉÖ:');
            this.results.errors.forEach(error => {
                console.log(`  ${error.test}: ${error.error}`);
            });
        }
        
        const successRate = ((this.results.passed / this.results.total) * 100).toFixed(1);
        console.log(`\nüéØ ÊàêÂäüÁéá: ${successRate}%`);
    }
}

// Âª∂ËøüÂ∑•ÂÖ∑
export const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// Êó•ÂøóÂ∑•ÂÖ∑
export const logger = {
    info: (message) => console.log(`‚ÑπÔ∏è  ${message}`),
    success: (message) => console.log(`‚úÖ ${message}`),
    error: (message) => console.error(`‚ùå ${message}`),
    warn: (message) => console.warn(`‚ö†Ô∏è  ${message}`)
};